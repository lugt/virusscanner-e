在易里调用API时经常提到“句柄”，它究竟是什么？ 
引用西风的话：

句柄并没有什么神奇之处，不管哪种句柄，实际都是一个整数。它标识一种资源，如窗口、位图等等。就象你找一个人，必须知道它的地址一样，如果你要操作一种资源，必须先获得句柄。
“取窗口句柄（）”并不是只能取出窗口的句柄，所有窗口控件，如编辑框、标签等都可以用本命令取出自己的句柄，如：
编辑框1.取窗口句柄（）
标签1.取窗口句柄（）
控件的句柄同样，不知你明白了没有？我个人理解是任何控件都有它自身的特有属性，句柄也就指它的特有属性（包括共性）。好像人有男女之分，要找男人一定是找有特有性别的人，也就是能区分不是女人的特性的人。

“句柄”（handle）
handle的本意是把柄，把手的意思。是你与操作系统打交道的
东东。举个通俗的例子，比如你考上了大学，入学后，学校（操作系统）会给你一个学生
证号。注意，这个号码是学校指定的，你无法自选。有了这个号码（学生证，假设一证多用）
享受学校提供的服务：如你就可以去图书馆借书，去食堂吃饭，去教室上课等等。但你不能
到食堂里买啤酒，因为学校不允许这种服务。而在计算机中系统提供的服务就是API调用，
你有了HANDLE，就可以理直气壮地向系统提出调用API的服务。
而指针的权力就大多了，有了指针你可以到处去喝酒，打架，学校（操作系统）管不着，所以
句柄和指针的区别在于句柄只能调用系统提供的服务。而句柄虽然是一个能相互区别的号码，
但与我们普通的ID号又有区别，普通的ID号是可以由程序员自己定义的，而句柄不行，它是
对象生成时系统指定的，是为了区别系统中存在的各个对象，这个句柄不是由程序员符给的
句柄概念在WINDOWS编程中是一个很重要的概念，在许多地方都扮演着重要的角色。但由此而产生的句柄概念也大同小异，比如：<<Microsoft Windows 3 Developer's Workshop>>(Microsoft Press,by Richard Wilton)一书中句柄的概念是：在Windows环境中，句柄是用来标识项目的，这些项目包括：
*.模块(module)
*.任务(task)
*.实例(instance)
*.文件(file)
*.内存块(block of memory)
*.菜单(menu)
*.控制(control)
*.字体(font)
*.资源(resource),包括图标(icon)，光标(cursor)，字符串(string)等
*.GDI对象(GDI object),包括位图(bitmap)，画刷(brush)，元文件（<I>meta</I>file),调色板(palette)，画笔(pen)，区域(region)，以及设备描述表(device context)。
WINDOWS程序中并不是用物理地址来标识一个内存块，文件，任务或动态装入模块的，相反的，WINDOWS API给这些项目分配确定的句柄，并将句柄返回给应用程序，然后通过句柄来进行操作。
在<<WINDOWS编程短平快>>(南京大学出版社）一书中是这么说的：句柄是WONDOWS用来标识被应用程序所建立或使用的对象的唯一整数，WINDOWS使用各种各样的句柄标识诸如应用程序实例，窗口，控制，位图，GDI对象等等。WINDOWS句柄有点象C语言中的文件句柄。
从上面的2个定义中的我们可以看到，句柄是一个标识符，是拿来标识对象或者项目的，它就象我们的姓名一样，每个人都会有一个，不同的人的姓名不一样，但是，也可能有一个名字和你一样的人。从数据类型上来看它只是一个16位的无符号整数。应用程序几乎总是通过调用一个WINDOWS函数来获得一个句柄，之后其他的WINDOWS函数就可以使用该句柄，以引用相应的对象。在WINDOWS编程中会用到大量的句柄，比如：HINSTANCE（实例句柄），HBITMAP（位图句柄），HDC（设备描述表句柄），HICON（图标句柄）等等，这当中还有一个通用的句柄，就是HANDLE，比如下面的语句：
HINSTANCE hInstance；
可以改成：
HANDLE hInstance；
上面的2句语句都是对的。
一个WINDOWS应用程序可以用不同的方法获得一个特定项的句柄。许多API函数，诸如CreateWindow,GlobalAlloc,OpenFile的返回值都是一个句柄值。另外，WINDOWS也能通过应用程序的引出函数将一个句柄作为参数传送给应用程序，应用程序一旦获得了一个确定项的句柄，便可在WINDOWS环境下的任何地方对这个句柄进行操作。其实句柄的大量使用已经影响到了每一个WINDOWS的程序设计。
句柄只有当唯一的确定了一个项目的时候，它才开始有意义。句柄对应着项目表中的一项，而只有WINDOWS本身才能直接存取这个表，应用程序只能通过API函数来处理不同的句柄，举个例子来说吧！比如：我们可以为我们的应用程序申请一块内存块，通过调用API函数GlobalAlloc,来返回一个句柄值：
hMem=GlobalAlloc(......);
其实现在hMem的值只是一个索引值，不是物理地址，应用程序还不能直接存取这块内存。这儿还有一个话外题，就是，一般情况下我们在编程的时候，给应用程序分配的内存都是可以移动的或者是可以丢弃的，这样能使有限的内存资源充分利用，所以，在某一个时候我们分配的那块内存的地址是不确定的，因为他是可以移动的，所以得先锁定那块内存块，这儿应用程序需要调用API函数GlobalLock函数来锁定句柄。如下：
lpMem=GlobalLock(hMem);
这样应用程序才能存取这块内存。
我想现在大家已经能对句柄概念有所了解了，我希望我的文章能对大家有所帮助。其实如果你学过SDK编程，那对句柄的概念理解会更好，更深。